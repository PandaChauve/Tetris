angular.module("angularApp.factories").factory("stateChecker",["gameConstants","TIC_PER_SEC",function(a,b){"use strict";function c(){}function d(){$("#rules ul").append($("<li class='defeatCond'></li>"))}function e(a){$("#rules ul").append($("<li class='successCond'>Get "+a+" points</li>")),this.val=a}function f(a){0===a?$("#rules ul").append($("<li class='successCond'>Destroy each block</li>")):$("#rules ul").append($("<li class='successCond'>Reduce the block count to "+a+"</li>")),this.val=a}function g(a){$("#rules ul").append($("<li class='defeatCond'>Max "+a+" swaps</li>")),this.val=a}function h(a){$("#rules ul").append($("<li class='defeatCond'>Max "+a+" seconds</li>")),this.val=a}return c.prototype.reset=function(a){this.defeatComponents=[],this.succesComponents=[],this.makeComponents(a),this.defeatComponents.push(new d),this.lastSuccessCheck=!1,this.lastDefeatCheck=!1},c.prototype.defeat=function(){return this.lastDefeatCheck},c.prototype.victory=function(){return this.lastSuccessCheck},c.prototype.check=function(a){this.lastSuccessCheck=0!==this.succesComponents.length,this.lastDefeatCheck=!1;for(var b=0;b<this.succesComponents.length;b+=1)this.lastSuccessCheck=this.succesComponents[b].check(a)&&this.lastSuccessCheck;for(b=0;b<this.defeatComponents.length;b+=1)this.lastDefeatCheck=this.defeatComponents[b].check(a)||this.lastDefeatCheck},c.prototype.makeComponents=function(a){return $("#rules").html("<ul />"),null===a||void 0===a?void $("#rules ul").append($("<li class='succesCond'>Try to stay alive !</li>")):(void 0!==a.blocksLeft&&this.succesComponents.push(new f(a.blocksLeft)),void 0!==a.score&&this.succesComponents.push(new e(a.score)),void 0!==a.swaps&&this.defeatComponents.push(new g(a.swaps)),void(void 0!==a.time&&this.defeatComponents.push(new h(a.time))))},d.prototype.check=function(b){return b.getMaxFixed()>=a.lostThreshold},e.prototype.check=function(a){return a.getScore()>=this.val},f.prototype.check=function(a){return a.grid.blockCount()<=this.val},g.prototype.check=function(a){return a.swapCount>this.val},h.prototype.check=function(a){return a.tics/b>this.val},new c}]);